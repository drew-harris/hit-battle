// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    song          Song?
    votes         Vote[]
    recievedVotes Vote[] @relation("recievedVotes")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Song {
    id     String  @id @unique
    title  String
    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    artist     String
    album      String
    albumArt   String
    previewUrl String
    popularity Int

    stemifyLink String?

    Matches Match[]
    Votes   Vote[]
}

model Match {
    id   String   @id @unique @default(cuid())
    date DateTime

    songs Song[]
    votes Vote[]
}

model Vote {
    id String @id @unique @default(cuid())

    Match   Match?  @relation(fields: [matchId], references: [id])
    matchId String?

    user   User   @relation(fields: [userId], references: [id])
    userId String

    for   Song   @relation(fields: [forId], references: [id])
    forId String

    forUser   User   @relation(fields: [forUserId], references: [id], name: "recievedVotes")
    forUserId String

    submittedAt DateTime @default(now())
}
