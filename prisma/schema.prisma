// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isMod Boolean @default(false)

    pointsBeforeReset Int @default(0)

    song   Song?   @relation(fields: [songId], references: [id])
    songId String?

    votes    Vote[]
    comments Comment[]

    @@fulltext([name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Song {
    id    String @id @unique @default(uuid())
    title String
    users User[]

    artist         String
    artistId       String
    nameHash       String  @unique
    album          String
    albumId        String
    trackNum       Int     @default(1)
    albumArt       String?
    loaderAlbumArt String?
    previewUrl     String?
    popularity     Int?

    userLimit Int @default(1)

    stemifyLink String?

    Matches Match[]
    Votes   Vote[]

    @@fulltext([title])
    @@fulltext([artist])
    @@fulltext([album])
}

model Match {
    id         String   @id @unique @default(cuid())
    startDate  DateTime
    endDate    DateTime
    isFeatured Boolean  @default(false)

    title    String?
    isCustom Boolean @default(false)

    songs Song[]
    votes Vote[]

    comments Comment[]
}

model Comment {
    id      String   @id @default(cuid())
    content String
    date    DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    match   Match  @relation(fields: [matchId], references: [id])
    matchId String
}

model Vote {
    id String @id @unique @default(cuid())

    Match   Match  @relation(fields: [matchId], references: [id])
    matchId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    for   Song   @relation(fields: [forId], references: [id])
    forId String

    submittedAt DateTime @default(now())
}

model SpotifyCreds {
    id      String   @id @default(cuid())
    token   String
    expires DateTime
}
